<?php

namespace App\PDF;

use App\Models\Conciliacion\ConciliacionDetalle;
use App\Models\Proyecto;
use App\Facades\Context;
use Ghidev\Fpdf\Rotation;
use App\Models\Conciliacion\Conciliacion;

class PDFConciliacion extends Rotation
{

    /**
     * @var Conciliacion
     */
    protected  $conciliacion;

    /**
     * @var ConciliacionDetalle
     */
    protected $conciliacion_detalle;

    var $WidthTotal;
    var $txtTitleTam, $txtSubtitleTam, $txtSeccionTam, $txtContenidoTam, $txtFooterTam;
    var $encola = "";

    /**
     * Conciliacion constructor.
     * @param string $orientation
     * @param string $unit
     * @param string $size
     * @param Conciliacion $conciliacion
     */
    public function __construct($orientation = 'P', $unit = 'cm', $size = 'A4', Conciliacion $conciliacion)
    {
        parent::__construct($orientation, $unit, $size);

        $this->SetAutoPageBreak(true, 4.5);
        $this->conciliacion = $conciliacion;
        $this->conciliacion_detalle = $conciliacion->conciliacionDetalle;
        $this->WidthTotal = $this->GetPageWidth() - 2;
        $this->txtTitleTam = 18;
        $this->txtSubtitleTam = 13;
        $this->txtSeccionTam = 9;
        $this->txtContenidoTam = 7;
        $this->txtFooterTam = 6;
    }

    /**
     *
     */
    function Header()
    {
        $this->title();
        $this->logo();

        //Obtener Posiciones despues de title y logo.
        $y_inicial = $this->getY();
        $x_inicial = $this->getX();
        $this->setY($y_inicial);
        $this->setX($x_inicial);

        $this->details();

        //Posiciones despues de details
        $y_final = $this->getY();
        $this->setY($y_inicial);
        $alto = abs($y_final - $y_inicial);

        //Round Detalis.
        $this->SetWidths(array(0.45 * $this->WidthTotal));
        $this->SetRounds(array('1234'));
        $this->SetRadius(array(0.2));
        $this->SetFills(array('255,255,255'));
        $this->SetTextColors(array('0,0,0'));
        $this->SetHeights(array($alto));
        $this->SetStyles(array('DF'));
        $this->SetAligns("L");
        $this->SetFont('Arial', '', $this->txtContenidoTam);
        $this->setY($y_inicial);
        $this->Row(array(""));

        $this->setY($y_inicial);
        $this->setX($x_inicial);
        $this->details();

        //Establecer Y despues de  details.
        $this->setY($y_final);
        $this->Ln(0.25);


        $this->SetFont('Arial', 'B', $this->txtSeccionTam);
        $this->Cell(0.55 * $this->WidthTotal, 0.7, utf8_decode('Rutas'), 0, 1, 'L');

        //Obtener Posiciones despues de title de rutas.
        $y_inicial = $this->getY();
        $x_inicial = $this->getX();
        $this->setY($y_inicial);
        $this->setX($x_inicial);

        $this->rutas();

        //Posiciones despues de details
        $y_final = $this->getY();
        $this->setY($y_inicial);
        $alto = abs($y_final - $y_inicial);

        //Round Rutas.
        $this->SetWidths(array($this->WidthTotal));
        $this->SetRounds(array('1234'));
        $this->SetRadius(array(0.2));
        $this->SetFills(array('255,255,255'));
        $this->SetTextColors(array('0,0,0'));
        $this->SetHeights(array($alto));
        $this->SetStyles(array('DF'));
        $this->SetAligns("L");
        $this->SetFont('Arial', '', $this->txtContenidoTam);
        $this->setY($y_inicial);
        $this->Row(array(""));

        $this->setY($y_inicial);
        $this->setX($x_inicial);
        $this->rutas();

        //Obtener Y despues de rutas
        $this->setY($y_final);
        $this->Ln(0.5);
    }

    function Footer()
    {
        parent::Footer(); // TODO: Change the autogenerated stub
    }

    private function title() {
        $this->SetFont('Arial', 'B', $this->txtTitleTam - 3);
        $this->CellFitScale(0.6 * $this->WidthTotal, 1.5, utf8_decode('REPORTE DE CONCILIACIÓN'), 0, 1, 'L', 0);

        $this->SetFont('Arial', '', $this->txtSubtitleTam -1);
        $this->CellFitScale(0.6 * $this->WidthTotal, 0.35, utf8_decode('Conciliación #'.$this->conciliacion->idconciliacion), 0, 1, 'L', 0);
        $this->Line(1, $this->GetY() + 0.2, $this->WidthTotal + 1, $this->GetY() + 0.2);
        $this->Ln(0.5);

        //Detalles de la Asignación (Titulo)
        $this->SetFont('Arial', 'B', $this->txtSeccionTam);
        $this->Cell(0.55 * $this->WidthTotal, 0.7, utf8_decode('Detalles de la Conciliación'), 0, 1, 'L');
    }

    private function logo() {
        $this->image(public_path('img/logo_hc.png'), $this->WidthTotal - 1.3, 0.5, 2.33, 1.5);
    }

    private function details() {
        $this->SetFont('Arial', 'B', $this->txtContenidoTam);
        $this->Cell(0.1 * $this->WidthTotal, 0.5, utf8_decode('PROYECTO:'), '', 0, 'L');
        $this->SetFont('Arial', '', $this->txtContenidoTam);
        $this->CellFitScale(0.35 * $this->WidthTotal, 0.5, utf8_decode(Proyecto::find(Context::getId())->descripcion), '', 1, 'L');

        $this->SetFont('Arial', 'B', $this->txtContenidoTam);
        $this->Cell(0.1 * $this->WidthTotal, 0.5, utf8_decode('FOLIO:'), '', 0, 'L');
        $this->SetFont('Arial', '', $this->txtContenidoTam);
        $this->CellFitScale(0.35 * $this->WidthTotal, 0.5, utf8_decode($this->conciliacion->idconciliacion), '', 1, 'L');

        $this->SetFont('Arial', 'B', $this->txtContenidoTam);
        $this->Cell(0.1 * $this->WidthTotal, 0.5, utf8_decode('SINDICATO:'), '', 0, 'LB');
        $this->SetFont('Arial', '', $this->txtContenidoTam);
        $this->CellFitScale(0.35 * $this->WidthTotal, 0.5, utf8_decode($this->conciliacion->sindicato->NombreCorto), '', 1, 'L');

        $this->SetFont('Arial', 'B', $this->txtContenidoTam);
        $this->Cell(0.1 * $this->WidthTotal, 0.5, utf8_decode('PERIODO:'), '', 0, 'LB');
        $this->SetFont('Arial', '', $this->txtContenidoTam);
        $this->CellFitScale(0.35 * $this->WidthTotal, 0.5, utf8_decode($this->conciliacion->fecha_inicial).' al '.$this->conciliacion->fecha_final, '', 1, 'L');
    }

    private function rutas()
    {
        foreach($this->conciliacion->rutas as $ruta) {
            $this->SetFont('Arial', '', $this->txtContenidoTam);
            $this->Cell($this->WidthTotal, 0.5, utf8_decode($ruta->present()->descripcionRuta), '', 1, '');
        }
    }

    function items() {
        $num_items = count($this->conciliacion->viajes());
        $i = 1;

        $this->SetWidths(array(0));
        $this->SetFills(array('255,255,255'));
        $this->SetTextColors(array('1,1,1'));
        $this->SetRounds(array('0'));
        $this->SetRadius(array(0));
        $this->SetHeights(array(0));
        $this->Row(Array('l'));
        $this->SetFont('Arial', 'B', $this->txtSeccionTam);
        $this->SetTextColors(array('255,255,255'));

        $this->CellFitScale($this->WidthTotal-1, 1, utf8_decode('RECIBIDOS'), 0, 1, 'L');
        $this->SetWidths(array(0.04 * $this->WidthTotal, 0.42 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal));
        $this->SetFont('Arial', '', 6);
        $this->SetStyles(array('DF', 'DF', 'DF', 'DF', 'FD', 'DF',  'DF', 'DF'));
        $this->SetWidths(array(0.04 * $this->WidthTotal, 0.42 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal,  0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal, 0.09 * $this->WidthTotal));
        $this->SetRounds(array('1', '', '', '', '',  '', '', '2'));
        $this->SetRadius(array(0.2, 0, 0, 0, 0, 0,  0, 0.2));
        $this->SetFills(array('180,180,180', '180,180,180', '180,180,180', '180,180,180', '180,180,180', '180,180,180', '180,180,180', '180,180,180'));
        $this->SetTextColors(array('0,0,0', '0,0,0', '0,0,0', '0,0,0', '0,0,0', '0,0,0', '0,0,0', '0,0,0'));
        $this->SetHeights(array(0.6));
        $this->SetAligns(array('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'));
        $this->Row(array('#', utf8_decode("Descripción"), "Unidad", "Adquirido", "Precio", "Importe",  "Recibido", "% Recibido"));


    }

    function create() {
        $this->items();
        $this->SetMargins(1, 0.5, 1);
        $this->AliasNbPages();
        $this->AddPage();
        $this->Ln(0.5);
        $this->Output('I', 'Conciliacion.pdf', 1);
        exit;
    }
}